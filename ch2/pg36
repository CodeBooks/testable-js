describe("test make dinner refactored", function() {
    // Mocks
    Food = function() {};
    Food.prototype.attr = {};
    MixedFood = function(args) {
        var obj = Object.create(Food.prototype);
        obj.attr.isMixed = true;
        return obj;
    };
    CookedFood = function(dish) {
        var obj = Object.create(Food.prototype);
        obj.attr.isCooked = true;
        return obj;
    };
    ChickenBreast = function() {
        var obj = Object.create(Food.prototype);
        obj.attr.isChicken = true;
        return obj;
    };
    Meal = function(dish) { this.dish = dish };
    Mixer = function() {
        this.mix = function(chicken, ingredients) {
            return new MixedFood(chicken, ingredients);
        };
    };
    Ingredients = function(ings) { this.ings = ings; };
    // end Mocks

    it("cooked dinner", function() {
        this.addMatchers({
            toBeYummy: function(expected) {
                return this.actual.attr.isCooked && this.actual.attr.isMixed;
            }
        });
        var ingredients = new Ingredients('parsley', 'salt')
            , MockedCooker = function() {};
        // Local (to this test) mocked Cooker object that can actually
        // do testing!
        MockedCooker.prototype = {
            bake: function(food, deg, timer) {
                expect(food.attr.isMixed).toBeTruthy();
                food.attr.isCooked = true;
                return food
            }
            , degrees_f: function(temp) { expect(temp).toEqual(350); }
            , timer: function(time) {
                expect(time).toEqual('50 minutes');
            }
        };
        var cooker = new MockedCooker()
            , dinner = makeChickenDinner(ingredients, cooker)
        ;
        expect(dinner).toBeYummy();
    });
});
